Object.defineProperty(exports, "__esModule", { value: true });
exports.canvasRenderer = exports.CanvasRenderer = void 0;
var Recourse_1 = require("./Recourse");
var Ani_1 = require("./ani/Ani");
var canvas_1 = require("canvas");
var CanvasRenderer = /** @class */ (function () {
    function CanvasRenderer(canvas) {
        if (canvas)
            this.setCanvas(canvas);
    }
    CanvasRenderer.prototype.getImageData = function () {
        return this.canvas.toDataURL("image/png", 0.99);
    };
    CanvasRenderer.prototype.getImageBuffer = function () {
        if (this.canvas instanceof canvas_1.Canvas) {
            return this.canvas.toBuffer("image/jpeg");
        }
        else {
            throw new Error("image buffer only be supported in node.js");
        }
    };
    CanvasRenderer.prototype.clean = function () {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };
    CanvasRenderer.prototype.setCanvas = function (canvas) {
        this.canvas = canvas;
        this.ctx = this.canvas.getContext("2d");
    };
    CanvasRenderer.prototype.render = function (child, offset) {
        var _this = this;
        if (offset === void 0) { offset = 0; }
        if (!child)
            return;
        offset += child.offsetSec;
        var sec = this.stage.sec;
        var comp;
        if (child instanceof Ani_1.Ani) {
            comp = child === null || child === void 0 ? void 0 : child.getComponent(sec - offset);
        }
        else {
            comp = child;
        }
        if (!comp)
            return;
        this.ctx.save();
        // render special component props
        if (this.ctx.globalAlpha > 0) {
            // render itself
            // render base component props
            this.renderBase(comp);
            switch (comp.type) {
                case "Text":
                    this.renderText(comp);
                    break;
                case "Rect":
                    this.renderRect(comp);
                    break;
                case "Image":
                    this.renderImage(comp);
                    break;
                case "Arc":
                    this.renderArc(comp);
                    break;
                case "Line":
                    this.renderPath(comp);
                    break;
            }
            // render children components
            comp.children.forEach(function (c) {
                if (c)
                    _this.render(c, offset);
            });
        }
        this.ctx.restore();
    };
    CanvasRenderer.prototype.renderArc = function (arc) {
        this.ctx.beginPath();
        this.ctx.arc(0, 0, arc.radius, arc.startAngle, arc.endAngle, arc.anticlockwise);
        if (arc.strokeStyle)
            this.ctx.stroke();
        if (arc.fillStyle)
            this.ctx.fill();
    };
    CanvasRenderer.prototype.renderPath = function (line) {
        if (!line.path) {
            return;
        }
        var path;
        if (typeof line.path === "string") {
            path = new Path2D(line.path);
        }
        else {
            path = line.path;
        }
        if (this.ctx.fillStyle)
            this.ctx.fill(path);
        if (this.ctx.strokeStyle)
            this.ctx.stroke(path);
    };
    CanvasRenderer.prototype.renderClipRect = function (component) {
        this.ctx.beginPath();
        this.radiusArea(0, 0, component.shape.width, component.shape.height, component.radius);
        this.ctx.clip();
        this.ctx.closePath();
    };
    CanvasRenderer.prototype.renderImage = function (image) {
        var src = Recourse_1.recourse.images.get(image.src);
        if (!src) {
            return;
        }
        if (image.sliceShape) {
            this.ctx.drawImage(image, image.slicePosition.x, image.slicePosition.y, image.sliceShape.width, image.sliceShape.height, 0, 0, image.shape.width, image.shape.height);
        }
        else if (image.shape) {
            this.ctx.drawImage(src, 0, 0, image.shape.width, image.shape.height);
        }
        else {
            this.ctx.drawImage(src, 0, 0);
        }
    };
    CanvasRenderer.prototype.renderRect = function (component) {
        if (component.clip) {
            this.renderClipRect(component);
        }
        if (!component.radius || component.radius <= 0) {
            this.ctx.fillRect(0, 0, component.shape.width, component.shape.height);
        }
        else {
            this.fillRadiusRect(0, 0, component.shape.width, component.shape.height, component.radius);
        }
        if (component.strokeStyle) {
            if (!component.radius || component.radius <= 0) {
                this.ctx.strokeRect(0, 0, component.shape.width, component.shape.height);
            }
            else {
                this.strokeRadiusRect(0, 0, component.shape.width, component.shape.height, component.radius);
            }
        }
    };
    CanvasRenderer.prototype.renderBase = function (component) {
        var _a, _b, _c, _d, _e;
        var position;
        if (!component.position) {
            if (component.type === "Text") {
                position = {
                    x: this.canvas.width / 2,
                    y: this.canvas.height / 2,
                };
            }
            else {
                position = {
                    x: 0,
                    y: 0,
                };
            }
        }
        else {
            position = component.position;
        }
        this.ctx.translate(position.x - component.center.x, position.y - component.center.y);
        if (component.filter) {
            this.ctx.filter = component.filter;
        }
        if (component.strokeStyle) {
            this.ctx.strokeStyle = component.strokeStyle;
        }
        if (component.fillStyle) {
            this.ctx.fillStyle = component.fillStyle;
        }
        if (component.lineWidth) {
            this.ctx.lineWidth = component.lineWidth;
        }
        if (component.alpha !== undefined) {
            this.ctx.globalAlpha *= component.alpha;
        }
        if (component.scale !== undefined) {
            this.ctx.scale(component.scale.x, component.scale.y);
        }
        if ((_a = component.shadow) === null || _a === void 0 ? void 0 : _a.enable) {
            this.ctx.shadowBlur = (_c = (_b = component.shadow) === null || _b === void 0 ? void 0 : _b.blur) !== null && _c !== void 0 ? _c : 10;
            this.ctx.shadowColor = (_e = (_d = component.shadow) === null || _d === void 0 ? void 0 : _d.color) !== null && _e !== void 0 ? _e : "#000";
        }
    };
    CanvasRenderer.prototype.renderText = function (component) {
        this.prerenderText(component);
        if (component.strokeStyle) {
            this.ctx.strokeText(component.text, 0, 0);
        }
        if (component.fillStyle) {
            this.ctx.fillText(component.text, 0, 0);
        }
    };
    CanvasRenderer.prototype.prerenderText = function (component) {
        if (component.textAlign) {
            this.ctx.textAlign = component.textAlign;
        }
        if (component.textBaseline) {
            this.ctx.textBaseline = component.textBaseline;
        }
        var fontStr = (component.fontStyle ? component.fontStyle : "") + " " + (component.fontVariant ? component.fontVariant : "") + " " + (component.fontWeight ? component.fontWeight : "") + " " + (component.fontSize ? component.fontSize : 16) + "px " + (component.font ? component.font : "");
        if (component.font ||
            component.fontSize ||
            component.fontWeight ||
            component.fontStyle ||
            component.fontVariant) {
            this.ctx.font = fontStr;
        }
    };
    CanvasRenderer.prototype.fillRadiusRect = function (left, top, w, h, r) {
        this.ctx.beginPath();
        this.radiusArea(left, top, w, h, r);
        this.ctx.closePath();
        this.ctx.fill();
    };
    CanvasRenderer.prototype.strokeRadiusRect = function (left, top, w, h, r) {
        this.ctx.beginPath();
        this.radiusArea(left, top, w, h, r);
        this.ctx.closePath();
        this.ctx.stroke();
    };
    CanvasRenderer.prototype.radiusArea = function (left, top, w, h, r) {
        this.ctx.lineWidth = 0;
        var pi = Math.PI;
        this.ctx.arc(left + r, top + r, r, -pi, -pi / 2);
        this.ctx.arc(left + w - r, top + r, r, -pi / 2, 0);
        this.ctx.arc(left + w - r, top + h - r, r, 0, pi / 2);
        this.ctx.arc(left + r, top + h - r, r, pi / 2, pi);
    };
    return CanvasRenderer;
}());
exports.CanvasRenderer = CanvasRenderer;
exports.canvasRenderer = new CanvasRenderer();
//# sourceMappingURL=data:application/json;base64,