Object.defineProperty(exports, "__esModule", { value: true });
exports.Stage = void 0;
var Ani_1 = require("./ani/Ani");
var CanvasRenderer_1 = require("./CanvasRenderer");
var Component_1 = require("./component/Component");
var FFmpeg_1 = require("./FFmpeg");
var Recourse_1 = require("./Recourse");
var d3_1 = require("d3");
var async_1 = require("async");
var canvas_1 = require("canvas");
// Enable Path2D
require("canvas-5-polyfill");
var Stage = /** @class */ (function () {
    function Stage(canvas) {
        this.compRoot = new Component_1.Component();
        this.options = { sec: 5, fps: 30 };
        this.outputOptions = {
            fileName: "output",
            splitSec: 60,
        };
        this.outputConcurrency = 128;
        this.mode = "output";
        this.cFrame = 0;
        this.renderer = new CanvasRenderer_1.CanvasRenderer();
        this.renderer.stage = this;
        if (typeof window === "undefined") {
            var c = canvas_1.createCanvas(1920, 1080);
            this.renderer.setCanvas(c);
        }
        else {
            if (!canvas) {
                canvas = document.createElement("canvas");
                canvas.width = 1920;
                canvas.height = 1080;
                document.body.appendChild(canvas);
            }
            this.renderer.setCanvas(canvas);
        }
        this.sec = 0;
    }
    Object.defineProperty(Stage.prototype, "frame", {
        get: function () {
            return this.cFrame;
        },
        set: function (val) {
            this.cFrame = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stage.prototype, "sec", {
        get: function () {
            return this.cFrame / this.options.fps;
        },
        set: function (val) {
            this.cFrame = val * this.options.fps;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stage.prototype, "totalFrames", {
        get: function () {
            return this.options.sec * this.options.fps;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stage.prototype, "canvas", {
        get: function () {
            return this.renderer.canvas;
        },
        enumerable: false,
        configurable: true
    });
    Stage.prototype.addChild = function (child) {
        this.compRoot.children.push(child);
    };
    Stage.prototype.render = function (sec) {
        if (sec) {
            this.sec = sec;
        }
        this.renderer.clean();
        this.renderer.render(this.compRoot, this.compRoot.offsetSec);
    };
    Stage.prototype.loadRecourse = function () {
        return Recourse_1.recourse.setup();
    };
    Stage.prototype.play = function () {
        var _this = this;
        this.loadRecourse().then(function () {
            _this.doPlay();
        });
    };
    Stage.prototype.doPlay = function () {
        var _this = this;
        this.setup();
        if (this.interval) {
            this.interval.stop();
            this.interval = null;
        }
        else if (typeof window === "undefined") {
            // node
            var f = 0;
            var fs = require("fs");
            while (f < this.totalFrames) {
                this.render(f / this.options.fps);
                var data = this.canvas.toBuffer("image/png");
                var outDir = "out";
                if (!fs.existsSync(outDir)) {
                    fs.mkdirSync(outDir);
                }
                var p = outDir + "/" + this.outputOptions.fileName + "-" + f + ".png";
                fs.writeFileSync(p, data);
                console.log(p);
                f++;
            }
        }
        else if (this.output) {
            FFmpeg_1.loadffmpeg().then(function () {
                var partCount = Math.floor(_this.options.sec / _this.outputOptions.splitSec) + 1;
                var part = 0;
                var parts = [];
                while (part++ < partCount) {
                    parts.push(part);
                }
                async_1.eachSeries(parts, function (p, callback) {
                    var frames = [];
                    var picNameList = [];
                    while (_this.cFrame < _this.totalFrames &&
                        _this.cFrame < p * _this.outputOptions.splitSec * _this.options.fps) {
                        _this.cFrame++;
                        frames.push(_this.cFrame);
                    }
                    async_1.eachLimit(frames, _this.outputConcurrency, function (f, cb) {
                        _this.cFrame = f;
                        _this.render();
                        var no = f - (p - 1) * _this.outputOptions.splitSec * _this.options.fps;
                        picNameList.push("output-" + no + ".png");
                        var imageData = _this.renderer.getImageData();
                        FFmpeg_1.addFrameToFFmpeg(imageData, no).then(function () { return cb(); });
                    }).then(function () {
                        FFmpeg_1.outputMP4(_this.options.fps).then(function () {
                            FFmpeg_1.removePNG(picNameList);
                            callback();
                        });
                    });
                })
                    // tslint:disable-next-line:no-console
                    .then(function () { return console.log("finished!"); });
            });
        }
        else {
            this.interval = d3_1.interval(function (elapsed) {
                if (_this.output || _this.mode === "output") {
                    _this.cFrame++;
                }
                else {
                    _this.cFrame = Math.floor((elapsed / 1000) * _this.options.fps);
                }
                _this.render();
                if (_this.cFrame >= _this.totalFrames) {
                    _this.interval.stop();
                }
            }, (1 / this.options.fps) * 1000);
        }
    };
    Stage.prototype.setup = function () {
        this.setupChildren(this.compRoot);
    };
    Stage.prototype.setupChildren = function (ani) {
        var _this = this;
        ani.setup(this);
        if (ani instanceof Component_1.Component) {
            ani.children.forEach(function (child) {
                if (child instanceof Ani_1.Ani) {
                    _this.setupChildren(child);
                }
            });
        }
    };
    return Stage;
}());
exports.Stage = Stage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29yZS9TdGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFnQztBQUNoQyxtREFBa0Q7QUFFbEQsbURBQWtEO0FBQ2xELG1DQUE4RTtBQUM5RSx1Q0FBc0M7QUFDdEMseUJBQXFDO0FBQ3JDLCtCQUE4QztBQUM5QyxpQ0FBOEM7QUFFOUMsZ0JBQWdCO0FBQ2hCLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBRTdCO0lBbUNFLGVBQVksTUFBMEI7UUFsQ3RDLGFBQVEsR0FBYyxJQUFJLHFCQUFTLEVBQUUsQ0FBQztRQUV0QyxZQUFPLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUM5QixrQkFBYSxHQUFHO1lBQ2QsUUFBUSxFQUFFLFFBQVE7WUFDbEIsUUFBUSxFQUFFLEVBQUU7U0FDYixDQUFDO1FBR0Ysc0JBQWlCLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLFNBQUksR0FBRyxRQUFRLENBQUM7UUFDUixXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBd0JqQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksK0JBQWMsRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsR0FBRyxxQkFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM1QjthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDMUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3BC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